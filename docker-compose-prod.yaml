version: '3.7'

x-base-service: &default-env
  env_file:
      - ./.env.prod

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    hostname: nginx
    ports:
      - 1337:${DJANGO_NGINX_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:${DJANGO_NGINX_PORT}/auth/users/"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.2
    volumes:
      - ./certs:/etc/nginx/certs:ro/
    links:
      - gunicorn
    depends_on:
      gunicorn:
        condition: service_healthy
    restart: always

  gunicorn:
    <<: *default-env
    build:
      context: ./car_salon_activities
      dockerfile: Dockerfile-prod
    entrypoint:
      - ./gunicorn-entrypoint.sh
    hostname: gunicorn
    expose:
      - ${DJANGO_GUNICORN_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:${DJANGO_GUNICORN_PORT}/auth/users/"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.3
    volumes:
      - ./certs:/code/certs:ro/
    links:
      - celery
      - beat
    depends_on:
      celery:
        condition: service_healthy
      beat:
        condition: service_healthy
    restart: always

  postgres:
    <<: *default-env
    image: postgres:14.4-alpine
    hostname: postgres
    ports:
      - 5432:${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.4
    volumes:
      - ./car_salon_activities/data/postgres:/var/lib/postgresql/data
    restart: always

  rabbitmq:
    <<: *default-env
    image: rabbitmq:3.10.7-management-alpine
    hostname: rabbitmq
    ports:
      - 15672:${RABBITMQ_PORT}
      - 5672:${AMQP_RABBITMQ_PORT}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.5
    volumes:
      - ./car_salon_activities/data/rabbitmq:/var/lib/rabbitmq
    restart: always

  redis:
    <<: *default-env
    image: redis:7.2.1-alpine3.18
    command: redis-server --requirepass ${REDIS_PASSWORD}
    hostname: redis
    ports:
      - 6379:${REDIS_PORT}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.6
    volumes:
      - ./car_salon_activities/data/redis:/root/redis
    restart: always

  celery:
    <<: *default-env
    build:
      context: ./car_salon_activities
      dockerfile: Dockerfile-prod
    entrypoint:
      - ./celery-entrypoint.sh
    hostname: celery
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping --destination worker1@celery"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.7
    links:
      - postgres
      - rabbitmq
      - redis
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  beat:
    <<: *default-env
    build:
      context: ./car_salon_activities
      dockerfile: Dockerfile-prod
    entrypoint:
      - ./beat-entrypoint.sh
    hostname: beat
    healthcheck:
      test: ["CMD-SHELL", "pgrep celery"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.8
    links:
      - postgres
      - rabbitmq
      - redis
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  flower:
    <<: *default-env
    build:
      context: ./car_salon_activities
      dockerfile: Dockerfile-prod
    entrypoint:
      - ./flower-entrypoint.sh
    hostname: flower
    ports:
      - 5555:${FLOWER_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:${FLOWER_PORT}/"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.9
    links:
      - celery
      - beat
    depends_on:
      celery:
        condition: service_healthy
      beat:
        condition: service_healthy
    restart: always

  sphinx:
    build:
      context: ./car_salon_activities/
      dockerfile: Dockerfile-sphinx
    hostname: sphinx
    ports:
      - 7777:${SPHINX_NGINX_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:${SPHINX_NGINX_PORT}/"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      back-prod:
        ipv4_address: 172.168.10.10
    restart: always

networks:
  back-prod:
    driver: bridge
    internal: false
    ipam:
     config:
       - subnet: 172.168.10.0/24
